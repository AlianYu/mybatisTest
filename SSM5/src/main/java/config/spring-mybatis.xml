<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd 
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:config/db.properties" />

    <!-- 数据源，使用c3p0 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="initialPoolSize" value="${c3p0.initsize}"></property>
        <property name="maxPoolSize" value="${c3p0.maxsize}"></property>
        <property name="checkoutTimeout" value="${c3p0.timeout}"></property>
        <property name="minPoolSize" value="${c3p0.minsize}"></property>
    
    </bean>

    <!-- sqlSessinFactory在mybatis单独使用的时候
    咱们封装了一个工具类来获取该单例，但是和spring整合之后
    完全交给spring的ioc容器来实例化该对象

     -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的配置文件 -->
        <property name="configLocation" value="classpath:config/mybatis.xml" />
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:com/mapper/*.xml"></property>
    </bean>
    
    <!-- spring和mybatis整合的jar包,提供了
    自动生成mapper代理对象的机制，(指定对应的 dao 路径,dao中的接口和 mapper中的映射文件名 一一对应)
    只需要配置mapper接口的包路径
    和sqlsessionfactory
    -->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        
    </bean>

</beans>